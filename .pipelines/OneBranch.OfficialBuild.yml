# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

schedules:
- cron: "0 0 * * *"
  displayName: Daily Official Build
  branches:
    include:
    - internal-201911
  always: true

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

pool: sonic-image-builder

variables:
- group: SONIC-BUILD-VG-1
- name: PUBLISH_BLOB_PREFIX
  value: pipelines/$(Build.DefinitionName)/$(Build.SourceBranchName)

stages:
- stage: Build
  variables:
    BUILD_TIMESTAMP: $[format('{0:yyyyMMdd}.{0:HHmmss}', pipeline.startTime)]
    BUILD_NUMBER: $(Build.BuildId)
    PASSWORD: $(SONIC_PASSWORD)
    BUILD_OPTIONS: 'SONIC_BUILD_JOBS=4 ENABLE_DHCP_GRAPH_SERVICE=y SHUTDOWN_BGP_ON_START=y ENABLE_PFCWD_ON_START=y'
    VERSION_PATH: target/sonic.version
  jobs:
  - template: OneBranch-template.yml
    parameters:
      preSteps:
        - script: |
            sudo rm -rf target
            sudo rm -rf fsroot
            if [ ! -z $HOME ]; then
              sudo mkdir -p $HOME
              sudo chown $USER:$(id -gn) $HOME
            fi
          displayName: 'Init'
        - checkout: self
          clean: true
          submodules: recursive
          displayName: 'Checkout code'
        - script: |
            . functions.sh
            SONIC_VERSION=$(sonic_get_version)
            echo SONIC_VERSION=${SONIC_VERSION} > sonic.properties
            make configure PLATFORM=$BUILD_NAME
            echo $SONIC_VERSION > $VERSION_PATH
            mkdir -p target/release
            rm -f target/sonic-installers
            echo "##vso[task.setvariable variable=SONIC_VERSION]$SONIC_VERSION"
          displayName: 'Make configure'
      postSteps:
        - publish: $(System.DefaultWorkingDirectory)/target
          artifact: 'sonic-buildimage.$(BUILD_NAME)'
          displayName: "Archive sonic image"
        - script: |
            for image in `ls target | grep -E "\.(swi|bin|raw|deb)$"`; do
              version_image=$(echo $image | sed -E "s/(-dbg\.\w+|\.\w+)$/-$(SONIC_VERSION)\1/")
              echo "$image,$version_image" >> target/sonic-installers 
              cp -f target/$image target/$version_image
            done
          displayName: "Copy installers"
        - script: |
            mkdir -p azcopy
            pushd azcopy
            wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux && tar -xf azcopy_v10.tar.gz --strip-components=1
            popd
            export AZCOPY_LOG_LOCATION=$(pwd)/azcopy
            PUBLISH_PLATFORM_URL="https://$(SONIC_STORAGE_ACCOUNT).blob.core.windows.net/images/$(PUBLISH_BLOB_PREFIX)/$BUILD_NAME"
            PUBLISH_URL="$PUBLISH_PLATFORM_URL/$(Build.BuildId)$StorageSASKey"
            azcopy/azcopy copy target "$PUBLISH_PLATFORM_URL/$(Build.BuildId)$StorageSASKey" --recursive=true --put-md5
            touch prev_build
            azcopy/azcopy copy "$PUBLISH_PLATFORM_URL/latest_build$StorageSASKey" latest_build || true
            [ -f latest_build ] && mv latest_build prev_build
            echo $(Build.BuildId) > latest_build
            azcopy/azcopy copy latest_build "$PUBLISH_PLATFORM_URL/latest_build$StorageSASKey"  --put-md5
            azcopy/azcopy copy prev_build "$PUBLISH_PLATFORM_URL/prev_build$StorageSASKey"  --put-md5
          env:
            StorageSASKey: $(SONIC_STORAGE_SASKEY)
          displayName: "Publish to Azure Storage"
        - script: |
            SONIC_VERSION=$(cat $VERSION_PATH)
            PORT=443
            DOCKERS=$(ls target/docker-*.gz)
            BRANCH=$(Build.SourceBranchName)
            for f in $DOCKERS; do
              echo $f
              ./push_docker.sh $f $REGISTRY_SERVER $PORT $REGISTRY_USERNAME "$REGISTRY_PASSWD" $SONIC_VERSION $BRANCH
              ./push_docker.sh $f $REGISTRY_SERVER $PORT $REGISTRY_USERNAME "$REGISTRY_PASSWD" latest $BRANCH
            done
          env:
            REGISTRY_PASSWD: $(REGISTRY_PASSWD)
            BUILD_NUMBER: $(Build.BuildId)
          displayName: "Publish to Docker Registry"
        - task: ComponentGovernanceComponentDetection@0
        - script: |
            sudo rm -rf fsroot
            docker rmi -f $(docker images docker-* -a -q | grep docker-) || true
          displayName: "CleanUp"
      stepGroups:
        - name: vs
          script: |
            make target/sonic-vs.bin target/sonic-vs.img.gz
        - name: broadcom
          script: |
            OPTIONS="$BUILD_OPTIONS PASSWORD=$PASSWORD"
            make $OPTIONS target/sonic-broadcom.bin target/sonic-aboot-broadcom.swi || true
            make $OPTIONS target/sonic-nbi-broadcom.bin || true
            make $OPTIONS ENABLE_SYNCD_RPC=y target/docker-syncd-brcm-rpc.gz || true
            mv target/sonic-broadcom.bin target/sonic-aboot-broadcom.swi target/release/

            make $OPTIONS INSTALL_DEBUG_TOOLS=y target/sonic-broadcom.bin target/sonic-aboot-broadcom.swi
            mv target/sonic-broadcom.bin target/sonic-broadcom-dbg.bin
            mv target/sonic-aboot-broadcom.swi target/sonic-aboot-broadcom-dbg.swi
            mv target/release/* target/
        - name: mellanox
          script: |
            OPTIONS="$BUILD_OPTIONS INCLUDE_RESTAPI=y PASSWORD=$PASSWORD"
            make $OPTIONS INCLUDE_NAT=n target/sonic-mellanox.bin
            make $OPTIONS INCLUDE_NAT=n ENABLE_SYNCD_RPC=y target/docker-syncd-mlnx-rpc.gz || true
            mv target/sonic-mellanox.bin target/release/
            cp target/debs/stretch/python-saithrift_0.9.4_amd64.deb target/python-saithrift_0.9.4_amd64.deb

            make $OPTIONS INSTALL_DEBUG_TOOLS=y target/sonic-mellanox.bin
            mv target/sonic-mellanox.bin target/sonic-mellanox-dbg.bin
            mv target/release/* target/
        - name: barefoot
          script: |
            sudo modprobe overlay
            OPTIONS="$BUILD_OPTIONS ENABLE_NAT=n PASSWORD=$PASSWORD"
            make $OPTIONS ENABLE_RESTAPI=y target/docker-syncd-bfn-rpc.gz
            make $OPTIONS target/sonic-aboot-barefoot.swi
- stage: Mklink
  pool:
    name: CDPCustom- sonic-build-agents
    demands:
    - AGENT_GROUP -equals SONIC_PHX
  condition: always()
  jobs:
  - job: Mklink
    variables:
      MKLINK_SCRIPT: |
        echo "Make link for $(PUBLISH_BLOB_PREFIX)"
        PUBLISH_BLOB_PREFIX=$(PUBLISH_BLOB_PREFIX)
        PUBLISH_PATH=/azmirrors/$PUBLISH_BLOB_PREFIX
        LINK_ROOT=/data/$(dirname $PUBLISH_BLOB_PREFIX)
        BRANCH_NAME=$(basename $PUBLISH_BLOB_PREFIX)
        for platform in `ls $PUBLISH_PATH`; do
          platform_path=$PUBLISH_PATH/$platform
          if ! [ -f $platform_path/latest_build ]; then
              echo "The file $platform_path/latest_build does not exist"
              continue
          fi
          
          latest_build=$(cat $platform_path/latest_build)
          latest_path=$platform_path/$latest_build
          if ! [ -d $latest_path ]; then
              echo "The path $latest_path does not exist"
              continue
          fi
          
          # Make soft links for latest and prev
          LINK_PATH=$LINK_ROOT/$platform/$BRANCH_NAME
          mkdir -p $LINK_PATH
          if [ -d $LINK_PATH/latest ] && [ "$(realpath $LINK_PATH/latest)" != "$latest_path" ]; then
            ln -sf "$(realpath $LINK_PATH/latest)" "$LINK_PATH/prev"
          fi
          ln -sf "$latest_path" "$LINK_PATH/latest"

          # Make soft links for installers
          installers_path=$LINK_PATH/installers
          mkdir -p $installers_path
          ln -sf $latest_path/target/sonic.version $installers_path/sonic.version
          for installer in `cat $latest_path/target/sonic-installers`; do
            image=$(echo $installer | cut -d, -f1)
            version_image=$(echo $installer | cut -d, -f2)
            ln -sf $latest_path/target/$version_image $installers_path/$image
          done
        done
    steps:
    - script: |
        echo "Make soft links"
        ssh -tt -o UserKnownHostsFile=/dev/null \
        -o LogLevel=error \
        -o strictHostKeyChecking=no \
        acs-trusty8.corp.microsoft.com \
        "$MKLINK_SCRIPT"
      displayName: "Make soft links for trusty8"
