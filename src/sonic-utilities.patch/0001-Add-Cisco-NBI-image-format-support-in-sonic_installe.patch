From da535aa2119c625fa2f8d0e2f284ee13f94ed74d Mon Sep 17 00:00:00 2001
From: Jiahua Wang <jiahwang@cisco.com>
Date: Wed, 5 Feb 2020 22:26:42 -0800
Subject: [PATCH] Add Cisco NBI image format support in sonic_installer

Signed-off-by: Jiahua Wang <jiahwang@cisco.com>
---
 sonic_installer/main.py | 86 +++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 84 insertions(+), 2 deletions(-)

diff --git a/sonic_installer/main.py b/sonic_installer/main.py
index b47703c..2895b79 100644
--- a/sonic_installer/main.py
+++ b/sonic_installer/main.py
@@ -19,9 +19,12 @@ IMAGE_PREFIX = 'SONiC-OS-'
 IMAGE_DIR_PREFIX = 'image-'
 ONIE_DEFAULT_IMAGE_PATH = '/tmp/sonic_image'
 ABOOT_DEFAULT_IMAGE_PATH = '/tmp/sonic_image.swi'
+NBI_DEFAULT_IMAGE_PATH = '/tmp/sonic-nbi-cisco.bin'
 IMAGE_TYPE_ABOOT = 'aboot'
+IMAGE_TYPE_NBI = 'nbi'
 IMAGE_TYPE_ONIE = 'onie'
 ABOOT_BOOT_CONFIG = '/boot-config'
+NBI_AUTOBOOT_TOOL = '/usr/local/bin/autoboot.sh'
 
 #
 # Helper functions
@@ -57,8 +60,12 @@ def reporthook(count, block_size, total_size):
 def get_running_image_type():
     """ Attempt to determine whether we are running an ONIE or Aboot image """
     cmdline = open('/proc/cmdline', 'r')
-    if "Aboot=" in cmdline.read():
+    proc_cmdline = cmdline.read()
+    cmdline.close()
+    if "Aboot=" in proc_cmdline:
         return IMAGE_TYPE_ABOOT
+    elif "ksimg=" in proc_cmdline:
+        return IMAGE_TYPE_NBI
     return IMAGE_TYPE_ONIE
 
 # Returns None if image doesn't exist or isn't a regular file
@@ -69,8 +76,11 @@ def get_binary_image_type(binary_image_path):
 
     with open(binary_image_path) as f:
         # Aboot file is a zip archive; check the start of the file for the zip magic number
-        if f.read(4) == "\x50\x4b\x03\x04":
+        magic = f.read(4)
+        if magic == "\x50\x4b\x03\x04":
            return IMAGE_TYPE_ABOOT
+        elif magic == "\x36\x13\x03\x1b":
+           return IMAGE_TYPE_NBI
     return IMAGE_TYPE_ONIE
 
 # Returns None if image doesn't exist or doesn't appear to be a valid SONiC image file
@@ -82,6 +92,11 @@ def get_binary_image_version(binary_image_path):
         p1 = subprocess.Popen(["unzip", "-p", binary_image_path, "boot0"], stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
         p2 = subprocess.Popen(["grep", "-m 1", "^image_name"], stdin=p1.stdout, stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
         p3 = subprocess.Popen(["sed", "-n", r"s/^image_name=\"\image-\(.*\)\"$/\1/p"], stdin=p2.stdout, stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
+    elif binary_type == IMAGE_TYPE_NBI:
+        p1 = subprocess.Popen(["/usr/local/bin/x_nbi_seg", binary_image_path, "stdout", "3"], stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
+        p2 = subprocess.Popen(["gzip", "-cd"], stdin=p1.stdout, stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
+        with open(os.devnull, 'w') as devnull:
+            p3 = subprocess.Popen(["cpio", "-i", "--to-stdout", ".imagehash"], stdin=p2.stdout, stdout=subprocess.PIPE, stderr=devnull, preexec_fn=default_sigpipe)
     else:
         p1 = subprocess.Popen(["cat", "-v", binary_image_path], stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
         p2 = subprocess.Popen(["grep", "-m 1", "^image_version"], stdin=p1.stdout, stdout=subprocess.PIPE, preexec_fn=default_sigpipe)
@@ -106,6 +121,13 @@ def set_default_image(image):
     if get_running_image_type() == IMAGE_TYPE_ABOOT:
         image_path = aboot_image_path(image)
         aboot_boot_config_set(SWI=image_path, SWI_DEFAULT=image_path)
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        image_dir = image.replace(IMAGE_PREFIX, IMAGE_DIR_PREFIX)
+        command = "%s -i \"%s/sonic-nbi-cisco.ks\"" % (NBI_AUTOBOOT_TOOL, image_dir)
+        run_command(command)
+        run_command("rm /host/sonic-nbi-cisco.ks")
+        lnk_cmd = "ln \"/host/%s/sonic-nbi-cisco.ks\" /host/sonic-nbi-cisco.ks" % image_dir
+        run_command(lnk_cmd)
     else:
         command = 'grub-set-default --boot-directory=' + HOST_PATH + ' ' + str(images.index(image))
         run_command(command)
@@ -149,6 +171,21 @@ def run_command(command):
     if proc.returncode != 0:
         sys.exit(proc.returncode)
 
+# Run bash command, print output to stdout and return output on success
+def run_command_output(command):
+    click.echo(click.style("Command: ", fg='cyan') + click.style(command, fg='green'))
+
+    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
+    (out, err) = proc.communicate()
+
+    click.echo(out)
+
+    if proc.returncode != 0:
+        click.echo(click.style("FAILED!", fg='red'))
+        sys.exit(proc.returncode)
+
+    return out
+
 # Returns list of installed images
 def get_installed_images():
     images = []
@@ -156,6 +193,10 @@ def get_installed_images():
         for filename in os.listdir(HOST_PATH):
             if filename.startswith(IMAGE_DIR_PREFIX):
                 images.append(filename.replace(IMAGE_DIR_PREFIX, IMAGE_PREFIX))
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        for filename in os.listdir(HOST_PATH):
+            if filename.startswith(IMAGE_DIR_PREFIX):
+                images.append(filename.replace(IMAGE_DIR_PREFIX, IMAGE_PREFIX))
     else:
         config = open(HOST_PATH + '/grub/grub.cfg', 'r')
         for line in config:
@@ -179,6 +220,13 @@ def get_next_image():
         config = open(HOST_PATH + ABOOT_BOOT_CONFIG, 'r')
         next_image = re.search("SWI=flash:(\S+)/", config.read()).group(1).replace(IMAGE_DIR_PREFIX, IMAGE_PREFIX)
         config.close()
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        command = "%s -c" % (NBI_AUTOBOOT_TOOL)
+        image_output = re.search("(\S+)/", run_command_output(command))
+        if image_output:
+            next_image = image_output.group(1).replace(IMAGE_DIR_PREFIX, IMAGE_PREFIX)
+        else:
+            next_image = "NONE"
     else:
         images = get_installed_images()
         grubenv = subprocess.check_output(["/usr/bin/grub-editenv", HOST_PATH + "/grub/grubenv", "list"])
@@ -207,6 +255,24 @@ def remove_image(image):
         click.echo('Removing image root filesystem...')
         subprocess.call(['rm','-rf', os.path.join(HOST_PATH, image_dir)])
         click.echo('Image removed')
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        nextimage = get_next_image()
+        current = get_current_image()
+        if image == nextimage:
+            image_dir = current.replace(IMAGE_PREFIX, IMAGE_DIR_PREFIX)
+            command = "%s -i \"%s/sonic-nbi-cisco.ks\"" % (NBI_AUTOBOOT_TOOL, image_dir)
+            run_command(command)
+            run_command("rm /host/sonic-nbi-cisco.ks")
+            lnk_cmd = "ln \"/host/%s/sonic-nbi-cisco.ks\" /host/sonic-nbi-cisco.ks" % image_dir
+            run_command(lnk_cmd)
+            click.echo("Set next boot to current image %s" % current)
+
+        image_dir = image.replace(IMAGE_PREFIX, IMAGE_DIR_PREFIX)
+        click.echo('Removing image root filesystem...')
+        #shutil.rmtree(HOST_PATH + '/' + image_dir)
+        rm_cmd = "rm -fr \"%s\"" % (HOST_PATH + '/' + image_dir)
+        run_command(rm_cmd)
+        click.echo('Image removed')
     else:
         click.echo('Updating GRUB...')
         config = open(HOST_PATH + '/grub/grub.cfg', 'r')
@@ -318,6 +384,8 @@ def install(url, force):
     cleanup_image = False
     if get_running_image_type() == IMAGE_TYPE_ABOOT:
         DEFAULT_IMAGE_PATH = ABOOT_DEFAULT_IMAGE_PATH
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        DEFAULT_IMAGE_PATH = NBI_DEFAULT_IMAGE_PATH
     else:
         DEFAULT_IMAGE_PATH = ONIE_DEFAULT_IMAGE_PATH
 
@@ -358,6 +426,13 @@ def install(url, force):
         if running_image_type == IMAGE_TYPE_ABOOT:
             run_command("/usr/bin/unzip -od /tmp %s boot0" % image_path)
             run_command("swipath=%s target_path=/host sonic_upgrade=1 . /tmp/boot0" % image_path)
+        elif running_image_type == IMAGE_TYPE_NBI:
+            image_output = run_command_output("/usr/local/bin/sonic-nbi-install.sh %s" % image_path)
+            image_dir = image_output.rstrip('\n')
+            run_command("%s -i \"%s/sonic-nbi-cisco.ks\"" % (NBI_AUTOBOOT_TOOL, image_dir) )
+            run_command("rm /host/sonic-nbi-cisco.ks")
+            lnk_cmd = "ln \"/host/%s/sonic-nbi-cisco.ks\" /host/sonic-nbi-cisco.ks" % image_dir
+            run_command(lnk_cmd)
         else:
             run_command("bash " + image_path)
             run_command('grub-set-default --boot-directory=' + HOST_PATH + ' 0')
@@ -406,6 +481,13 @@ def set_next_boot(image):
     if get_running_image_type() == IMAGE_TYPE_ABOOT:
         image_path = aboot_image_path(image)
         aboot_boot_config_set(SWI=image_path)
+    elif get_running_image_type() == IMAGE_TYPE_NBI:
+        image_dir = image.replace(IMAGE_PREFIX, IMAGE_DIR_PREFIX)
+        command = "%s -i \"%s/sonic-nbi-cisco.ks\"" % (NBI_AUTOBOOT_TOOL, image_dir)
+        run_command(command)
+        run_command("rm /host/sonic-nbi-cisco.ks")
+        lnk_cmd = "ln \"/host/%s/sonic-nbi-cisco.ks\" /host/sonic-nbi-cisco.ks" % image_dir
+        run_command(lnk_cmd)
     else:
         command = 'grub-reboot --boot-directory=' + HOST_PATH + ' ' + str(images.index(image))
         run_command(command)
-- 
2.7.4

